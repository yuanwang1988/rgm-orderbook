1) I chose Java as my implementation language as Java is the language I am currently most comfortable building a substantial project quickly. I have some exposure and experience programming in C and C++ but it would take me longer to build this project using these languages. I am interested in learning / adopting other languages such as C, C++ and Scala for better performance and parallel processing characteristics.

2) Let N be the number of orders in the order-book (BID or ASK) and K be the number of orders we need to match in order to execute a buy or sell trade of the targetted size. If an Add Order does not affect cost of buying the target size or the income of selling the target size, the time complexity of processing the Add Order is O(log(N)) because we are just adding the order to a hash-map [O(1)] and a heap [O(log(n))]. Otherwise, the time complexity is O(K*log(N)) since we are adding the order to a hashmap and heap and then we are recomputing the value of executing the buy/sell at target-size. To recompute the value, we are currently popping the best orders (lowest priced ASKs or highest priced bids) from the heap until we reach the target size and then putting these orders back into the heap.

3) The time complexity of processing a reduce order is the same.

4) I can achieve better time-complexity by using a more sophisticated implementation of the order-books which uses two heaps. A "Top" heap keeps track of the orders that will be matched if we execute a trade of the target-size (the top of this heap will be the worst order that will be matched) and another "Bottom" heap to keep track of the trades that will not be matched (the top of this heap will be the best order that will not be matched). If an Add Order or a Reduce Order affects the "Top" heap, I will update both the "Top" heap and the "Bottom" heap to maintain the invariant and update the price to buy/sell the target-size at the same time. If an Add Order or Reduce Order will only affect the "Bottom" heap then we will only need to add the order to the "Bottom" heap.